[{
        "id": "EF1CC5BB-4785-4D8E-AB98-5FA4E00B6A66",
        "name": "Arrays",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Median in a stream of Integers",
                "restrictions": ["G", "V"],
                "description": "Given that integers are read from a data stream. Find median of elements read so for in efficient way. For simplicity assume there are no duplicates."
            },
            {
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Find Numbers with Even Number of Digits",
                "restrictions": ["https://www.geeksforgeeks.org/median-of-stream-of-integers-running-integers/", "V"],
                "description": "Given an array nums of integers, return how many of them contain an even number of digits"
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Smallest String With Swaps",
                "restrictions": ["https://www.geeksforgeeks.org/find-m-th-smallest-value-in-k-sorted-arrays/", "G", "V"],
                "description": "You are given a string s, and an array of pairs of indices in the string pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string. You can swap the characters at any pair of indices in the given pairs any number of times. Return the lexicographically smallest string that s can be changed to after using the swaps."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Count Square Submatrices with All Ones",
                "restrictions": ["https://www.geeksforgeeks.org/find-triplets-array-whose-sum-equal-zero/", "N"],
                "description": "Given a m * n matrix of ones and zeros, return how many square submatrices have all ones."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Check If N and Its Double Exist",
                "restrictions": ["https://www.geeksforgeeks.org/largest-subset-whose-all-elements-are-fibonacci-numbers/", "G"],
                "description": "Given an array arr of integers, check if there exists two integers N and M such that N is the double of M ( i.e. N = 2 * M). More formally check if there exists two indices i and j"
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Bulb Switcher III",
                "restrictions": ["https://www.geeksforgeeks.org/largest-sum-subarray-least-k-numbers/"],
                "description": "There is a room with n bulbs, numbered from 1 to n, arranged in a row from left to right. Initially, all the bulbs are turned off. At moment k (for k from 0 to n - 1), we turn on the light[k] bulb. A bulb change color to blue only if it is on and all the previous bulbs (to the left) are turned on too. Return the number of moments in which all turned on bulbs are blue."
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "nth smallest value in k-sorted array",
                "restrictions": ["G", "V"],
                "description": "Given k sorted arrays of possibly different sizes, find m-th smallest value in the merged array."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Find all triplets with zero sum",
                "restrictions": ["G", "V"],
                "description": "Given an array of distinct elements. The task is to find triplets in the array whose sum is zero."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Largest subset whose all elements are Fibonacci numbers",
                "restrictions": ["G", "V"],
                "description": "Given an array with positive number the task is that we find largest subset from array that contain elements which are Fibonacci numbers."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Largest sum subarray with at-least k numbers",
                "restrictions": ["G", "V"],
                "description": "Given an array, find the subarray (containing at least k numbers) which has the largest sum."
            },
            {
                "id": "190E1A9D-20A4-4F98-AA54-B192E1C4D713",
                "name": "Converting Roman Numerals to Decimal lying between 1 to 3999",
                "restrictions": ["G", "V"],
                "description": "Given a Romal numeral, the task is to find its corresponding decimal value."
            },
            {
                "id": "190E1A9D-20A4-4F08-AA54-B192E1C4D7B9",
                "name": "Given two unsorted arrays, find all pairs whose sum is x",
                "restrictions": ["G", "V"],
                "description": "Given two unsorted arrays of distinct elements, the task is to find all pairs from both arrays whose sum is equal to X."
            },
            {
                "id": "190E1A9D-20A4-4F92-AA54-B192E1C4D7B9",
                "name": "Floor and ceil in an unsorted array",
                "restrictions": ["G", "V"],
                "description": "Given an unsorted array arr[] and an element x, find floor and ceiling of x in arr[0..n-1]."
            },
            {
                "id": "190E1A9D-21A4-4F18-AA54-B192E1C4D7B9",
                "name": "Floor and ceil in an unsorted array",
                "restrictions": ["G", "V"],
                "description": "Given an unsorted array arr[] and an element x, find floor and ceiling of x in arr[0..n-1]."
            },
            {
                "id": "190E1A9D-20A4-4F98-AA54-B193E1C4D7B9",
                "name": "Remove Element",
                "restrictions": ["G", "V"],
                "description": "Given an array nums and a value val, remove all instances of that value in-place and return the new length.The order of elements can be changed. It doesn't matter what you leave beyond the new length."
            },
            {
                "id": "190E1A9D-20A4-4F98-AA54-B192E0C4D7B9",
                "name": "Next Permutation",
                "restrictions": ["G", "V"],
                "description": "Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).The replacement must be in-place and use only constant extra memory."
            }

        ]
    },
    {
        "id": "EF1CC5BB-4785-4D8E-AB98-5FA5E00B6A67",
        "name": "Strings",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Find if string is K-Palindrome or not ",
                "restrictions": ["G", "V"],
                "description": "Given a string, find out if the string is K-Palindrome or not. A K-palindrome string transforms into a palindrome on removing at most k characters from it."
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Program to add two binary strings",
                "restrictions": ["G", "V"],
                "description": "Given two binary strings, return their sum (also a binary string).."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Multiply Large Numbers represented as Strings",
                "restrictions": ["G", "V"],
                "description": "Given two numbers as strings. The numbers may be very large (may not fit in long long int), the task is to find product of these two numbers."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Decode a string recursively encoded as count followed by substring",
                "restrictions": ["D", "G"],
                "description": "An encoded string (s) is given, the task is to decode it. The pattern in which the strings are encoded is as follows."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Rearrange a string in sorted order followed by the integer sum",
                "restrictions": ["G"],
                "description": "Given a string containing uppercase alphabets and integer digits (from 0 to 9), the task is to print the alphabets in the order followed by the sum of digits."
            },
            {
                "id": "190E1A9D-20A4-4F98-AA54-B192E1C4D7B9",
                "name": "Length of the longest substring",
                "restrictions": ["D", "N", "V"],
                "description": "Find length of longest subsequence of one string which is substring of another string"
            }
        ]
    },
    {
        "id": "EF1CC5BB-4785-4D8E-AB98-5FA5E00C6A12",
        "name": "Dynamic Programming",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Two sum",
                "restrictions": ["G", "V"],
                "description": "Given an array of integers, return indices of the two numbers such that they add up to a specific target.You may assume that each input would have exactly one solution, and you may not use the same element twice."
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Container with most water",
                "restrictions": ["D", "G", "V"],
                "description": "Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Valid paranthesis",
                "restrictions": ["D", "N"],
                "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Remove Duplicates from Sorted Array",
                "restrictions": ["D", "G"],
                "description": "Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Remove Element",
                "restrictions": ["G"],
                "description": "Given an array nums and a value val, remove all instances of that value in-place and return the new length.Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory."
            },
            {
                "id": "190E1A9D-20A4-4F98-AA54-B192E1C4D7B9",
                "name": "Find First and Last Position of Element in Sorted Array",
                "restrictions": ["D", "N", "V"],
                "description": "Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.Your algorithm's runtime complexity must be in the order of O(log n).If the target is not found in the array, return [-1, -1]."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Search Insert Position",
                "restrictions": ["G"],
                "description": "Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Remove Element",
                "restrictions": ["G"],
                "description": "Given an array nums and a value val, remove all instances of that value in-place and return the new length.Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Combination Sum",
                "restrictions": ["G"],
                "description": "Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Jump Game",
                "restrictions": ["G"],
                "description": "Given an array of non-negative integers, you are initially positioned at the first index of the array.Each element in the array represents your maximum jump length at that position.Determine if you are able to reach the last index."
            }
        ]
    },
    {
        "id": "EF1CC5BB-4785-4D8E-AB18-5FA5E00B6A69",
        "name": "Trees",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Unique Binary Search Trees",
                "restrictions": [
                    "G",
                    "V"
                ],
                "description": "Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?"
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Construct Binary Tree from Preorder and Inorder Traversal",
                "restrictions": [
                    "D",
                    "G",
                    "V"
                ],
                "description": "Given preorder and inorder traversal of a tree, construct the binary tree."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Populating Next Right Pointers in Each Node",
                "restrictions": [
                    "D",
                    "N"
                ],
                "description": "Given a Binary Tree, Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.Initially, all next pointers are set to NULL."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Sum Root to Leaf Numbers",
                "restrictions": [
                    "D",
                    "G"
                ],
                "description": "Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.An example is the root-to-leaf path 1->2->3 which represents the number 123.Find the total sum of all root-to-leaf numbers."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Kth Smallest Element in a BST",
                "restrictions": [
                    "G"
                ],
                "description": "Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.You may assume k is always valid, 1 ≤ k ≤ BST's total elements."
            },
            {
                "id": "190E1A9D-20A4-4F98-AA54-B192E1C4D7B9",
                "name": "Closest Binary Search Tree Value ",
                "restrictions": ["D", "N", "V"],
                "description": "Given a Bonary Tree, find a Closest Binary Search Tree Value"
            }
        ]
    },
    {
        "id": "EF1CC5BB-4795-4D8E-AB98-5FA5E00B6A16",
        "name": "HashMap",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Longest Substring Without Repeating Characters",
                "restrictions": [
                    "G",
                    "V"
                ],
                "description": "Given a string, find the length of the longest substring without repeating characters."
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Substring with Concatenation of All Words",
                "restrictions": [
                    "D",
                    "G",
                    "V"
                ],
                "description": "You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Minimum Window Substring",
                "restrictions": [
                    "D",
                    "N"
                ],
                "description": "Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n)."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Longest Substring with At Most Two Distinct Characters ",
                "restrictions": [
                    "D",
                    "G"
                ],
                "description": "Given a string S, find the Longest Substring with At Most Two Distinct Characters"
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Contains Duplicate",
                "restrictions": [
                    "G"
                ],
                "description": "Given an array of integers, find if the array contains any duplicates.Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct."
            },
            {
                "id": "190E1A9D-20A4-4F98-AA54-B192E1C4D7B9",
                "name": "Shortest Word Distance",
                "restrictions": [
                    "D",
                    "N",
                    "V"
                ],
                "description": "Find the shortest word distance between two words in a sentence"
            }
        ]
    },
    {
        "id": "EF1CC5BB-4785-4D8E-AB98-5FA5E00C6A68",
        "name": "Divide and Conquer",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Two sum",
                "restrictions": ["G", "V"],
                "description": "Given an array of integers, return indices of the two numbers such that they add up to a specific target.You may assume that each input would have exactly one solution, and you may not use the same element twice."
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Container with most water",
                "restrictions": ["D", "G", "V"],
                "description": "Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Valid paranthesis",
                "restrictions": ["D", "N"],
                "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Remove Duplicates from Sorted Array",
                "restrictions": ["D", "G"],
                "description": "Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Remove Element",
                "restrictions": ["G"],
                "description": "Given an array nums and a value val, remove all instances of that value in-place and return the new length.Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory."
            },
            {
                "id": "190E1A9D-20A4-4F98-AA54-B192E1C4D7B9",
                "name": "Find First and Last Position of Element in Sorted Array",
                "restrictions": ["D", "N", "V"],
                "description": "Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.Your algorithm's runtime complexity must be in the order of O(log n).If the target is not found in the array, return [-1, -1]."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Search Insert Position",
                "restrictions": ["G"],
                "description": "Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Remove Element",
                "restrictions": ["G"],
                "description": "Given an array nums and a value val, remove all instances of that value in-place and return the new length.Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Combination Sum",
                "restrictions": ["G"],
                "description": "Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Reverse Pairs",
                "restrictions": ["G"],
                "description": "Given an array nums, we call (i, j) an important reverse pair if i < j and nums[i] > 2*nums[j].."
            }
        ]
    },
    {
        "id": "EF1CC8BB-4785-4D8E-AB98-5FA5E00B6A10",
        "name": "BackTracking",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Single Number",
                "restrictions": ["G", "V"],
                "description": "Given a non-empty array of integers, every element appears twice except for one. Find that single one.."
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Repeated DNA Sequences",
                "restrictions": ["D", "G", "V"],
                "description": "All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: ACGAATTCCG. When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Reverse Bits",
                "restrictions": ["D", "N"],
                "description": "Reverse bits of a given 32 bits unsigned integer."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Bitwise AND of Numbers Range",
                "restrictions": ["D", "G"],
                "description": "Given a range [m, n] where 0 <= m <= n <= 2147483647, return the bitwise AND of all numbers in this range, inclusive."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Kth Largest Element in an Array ",
                "restrictions": ["G"],
                "description": "Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element."
            },
            {
                "id": "190E1A9D-20A4-4F98-AA54-B192E1C4D7B9",
                "name": "Additive Number ",
                "restrictions": ["D", "N", "V"],
                "description": "Additive number is a string whose digits can form additive sequence.A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.Given a string containing only digits '0'-'9', write a function to determine if it's an additive number."
            }
        ]
    },

    {
        "id": "EF1CC8BB-4785-4D8E-AB98-5FA5E00B6A10",
        "name": "Bit Manipulation",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Single Number",
                "restrictions": ["G", "V"],
                "description": "Given a non-empty array of integers, every element appears twice except for one. Find that single one.."
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Repeated DNA Sequences",
                "restrictions": ["D", "G", "V"],
                "description": "All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: 'ACGAATTCCG'. When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Reverse Bits",
                "restrictions": ["D", "N"],
                "description": "Reverse bits of a given 32 bits unsigned integer."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Bitwise AND of Numbers Range",
                "restrictions": ["D", "G"],
                "description": "Given a range [m, n] where 0 <= m <= n <= 2147483647, return the bitwise AND of all numbers in this range, inclusive."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Kth Largest Element in an Array ",
                "restrictions": ["G"],
                "description": "Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element."
            },
            {
                "id": "190E1A9D-20A4-4F98-AA54-B192E1C4D7B9",
                "name": "Additive Number ",
                "restrictions": ["D", "N", "V"],
                "description": "Additive number is a string whose digits can form additive sequence.A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.Given a string containing only digits '0'-'9', write a function to determine if it's an additive number."
            }
        ]
    },

    {
        "id": "EF1CC5BB-4785-4D8E-AB98-5FA5E00C6A68",
        "name": "Stacks",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Merge k Sorted Lists",
                "restrictions": ["G", "V"],
                "description": "Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity."
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Maximum Subarray",
                "restrictions": ["D", "G", "V"],
                "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Majority Element",
                "restrictions": ["D", "N"],
                "description": "Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.You may assume that the array is non-empty and the majority element always exist in the array.."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Kth Largest Element in an Array",
                "restrictions": ["D", "G"],
                "description": "Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Different Ways to Add Parentheses ",
                "restrictions": ["G"],
                "description": "Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.."
            },
            {
                "id": "190E1A9D-20A4-4F98-AA54-B192E1C4D7B9",
                "name": "Expression Add Operators ",
                "restrictions": ["D", "N", "V"],
                "description": "Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Count of Smaller Numbers After Self",
                "restrictions": ["G"],
                "description": "You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i]."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Count of Range Sum",
                "restrictions": ["G"],
                "description": "Given an integer array nums, return the number of range sums that lie in [lower, upper] inclusive.Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j (i ≤ j), inclusive."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Count of Smaller Numbers After Self",
                "restrictions": ["G"],
                "description": "You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i]"
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Jump Game",
                "restrictions": ["G"],
                "description": "Given an array of non-negative integers, you are initially positioned at the first index of the array.Each element in the array represents your maximum jump length at that position.Determine if you are able to reach the last index."
            }
        ]
    },
    {
        "id": "EF1CC5BB-4785-4D8E-AB98-5FA5E00C6A68",
        "name": "BackTracking",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Merge k Sorted Lists",
                "restrictions": ["G", "V"],
                "description": "Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity."
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Maximum Subarray",
                "restrictions": ["D", "G", "V"],
                "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Majority Element",
                "restrictions": ["D", "N"],
                "description": "Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.You may assume that the array is non-empty and the majority element always exist in the array.."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Kth Largest Element in an Array",
                "restrictions": ["D", "G"],
                "description": "Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Different Ways to Add Parentheses ",
                "restrictions": ["G"],
                "description": "Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.."
            },
            {
                "id": "190E1A9D-20A4-4F98-AA54-B192E1C4D7B9",
                "name": "Expression Add Operators ",
                "restrictions": ["D", "N", "V"],
                "description": "Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Count of Smaller Numbers After Self",
                "restrictions": ["G"],
                "description": "You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i]."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Count of Range Sum",
                "restrictions": ["G"],
                "description": "Given an integer array nums, return the number of range sums that lie in [lower, upper] inclusive.Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j (i ≤ j), inclusive."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Count of Smaller Numbers After Self",
                "restrictions": ["G"],
                "description": "You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i]"
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Jump Game",
                "restrictions": ["G"],
                "description": "Given an array of non-negative integers, you are initially positioned at the first index of the array.Each element in the array represents your maximum jump length at that position.Determine if you are able to reach the last index."
            }
        ]
    },
    {
        "id": "EF1CC5BB-4785-4D8E-AB98-5FA5E00B6A22",
        "name": "Recursion",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Sudoku Solver",
                "restrictions": ["G", "V"],
                "description": "Write a program to solve a Sudoku puzzle by filling the empty cells."
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Substring with Concatenation of All Words",
                "restrictions": ["D", "G", "V"],
                "description": "You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Minimum Window Substring ",
                "restrictions": ["D", "N"],
                "description": "Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n)."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Isomorphic Strings ",
                "restrictions": ["D", "G"],
                "description": "Given two strings S and T, find out if they are isomorphic or not."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "K-th Symbol in Grammar",
                "restrictions": ["G"],
                "description": "On the first row, we write a 0. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10."
            },
            {
                "id": "190E1A9D-20A4-4F98-AA54-B192E1C4D7B9",
                "name": "Valid Tic-Tac-Toe State",
                "restrictions": ["D", "N", "V"],
                "description": "A Tic-Tac-Toe board is given as a string array board. Return True if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.The board is a 3 x 3 array."
            }
        ]
    },
    {
        "id": "EF1CC5BB-4785-4D8E-AB98-5FA5E00C7A68",
        "name": "Queues",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Merge k Sorted Lists",
                "restrictions": ["G", "V"],
                "description": "Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity."
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Maximum Subarray",
                "restrictions": ["D", "G", "V"],
                "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Majority Element",
                "restrictions": ["D", "N"],
                "description": "Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.You may assume that the array is non-empty and the majority element always exist in the array.."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Kth Largest Element in an Array",
                "restrictions": ["D", "G"],
                "description": "Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Different Ways to Add Parentheses ",
                "restrictions": ["G"],
                "description": "Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.."
            },
            {
                "id": "190E1A9D-20A4-4F98-AA54-B192E1C4D7B9",
                "name": "Expression Add Operators ",
                "restrictions": ["D", "N", "V"],
                "description": "Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Count of Smaller Numbers After Self",
                "restrictions": ["G"],
                "description": "You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i]."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Count of Range Sum",
                "restrictions": ["G"],
                "description": "Given an integer array nums, return the number of range sums that lie in [lower, upper] inclusive.Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j (i ≤ j), inclusive."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Count of Smaller Numbers After Self",
                "restrictions": ["G"],
                "description": "You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i]"
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Jump Game",
                "restrictions": ["G"],
                "description": "Given an array of non-negative integers, you are initially positioned at the first index of the array.Each element in the array represents your maximum jump length at that position.Determine if you are able to reach the last index."
            }
        ]
    }
]

