
[{
        "id": "EF1CC5BB-4785-4D8E-AB98-5FA4E00B6A66",
        "name": "Arrays",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Plus One",
                "restrictions": ["https://www.geeksforgeeks.org/median-of-stream-of-integers-running-integers/", "V"],
                "description": "Given a non-empty array of digits representing a non-negative integer, plus one to the integer. The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit. You may assume the integer does not contain any leading zero, except the number 0 itself."
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Triangle",
                "restrictions": ["https://www.geeksforgeeks.org/find-m-th-smallest-value-in-k-sorted-arrays/", "G", "V"],
                "description": "Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Summary Ranges",
                "restrictions": ["https://www.geeksforgeeks.org/find-triplets-array-whose-sum-equal-zero/", "N"],
                "description": "Given a sorted integer array without duplicates, return the summary of its ranges."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Circular Array Loop",
                "restrictions": ["https://www.geeksforgeeks.org/largest-subset-whose-all-elements-are-fibonacci-numbers/", "G"],
                "description": "You are given a circular array nums of positive and negative integers. If a number k at an index is positive, then move forward k steps. Conversely, if it's negative (-k), move backward k steps. Since the array is circular, you may assume that the last element's next element is the first element, and the first element's previous element is the last element. Determine if there is a loop (or a cycle) in nums. A cycle must start and end at the same index and the cycle's length > 1. Furthermore, movements in a cycle must all follow a single direction. In other words, a cycle must not consist of both forward and backward movements."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Valid Triangle Number",
                "restrictions": ["https://www.geeksforgeeks.org/largest-sum-subarray-least-k-numbers/"],
                "description": "Given an array consists of non-negative integers, your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle."
            },
            {
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Maximum Swap",
                "restrictions": ["https://www.geeksforgeeks.org/median-of-stream-of-integers-running-integers/", "V"],
                "description": "Given a non-negative integer, you could swap two digits at most once to get the maximum valued number. Return the maximum valued number you could get."
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Maximum Sum of 3 Non-Overlapping Subarrays",
                "restrictions": ["https://www.geeksforgeeks.org/find-m-th-smallest-value-in-k-sorted-arrays/", "G", "V"],
                "description": "In a given array nums of positive integers, find three non-overlapping subarrays with maximum sum. Each subarray will be of size k, and we want to maximize the sum of all 3*k entries. Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Friends Of Appropriate Ages",
                "restrictions": ["https://www.geeksforgeeks.org/find-triplets-array-whose-sum-equal-zero/", "N"],
                "description": "Some people will make friend requests. The list of their ages is given and ages[i] is the age of the ith person. Person A will NOT friend request person B (B != A) if any of the following conditions are true: age[B] <= 0.5 * age[A] + 7age[B] > age[A]age[B] > 100 && age[A] < 100.Otherwise,A will friend request B.Note that if A requests B,B does not necessarily request A.Also,people will not friend request themselves.How many total friend requests are made ? "
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": " Image Smoother",
                "restrictions": ["https://www.geeksforgeeks.org/largest-subset-whose-all-elements-are-fibonacci-numbers/", "G"],
                "description": "Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself. If a cell has less than 8 surrounding cells, then use as many as you can."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Task Scheduler",
                "restrictions": ["https://www.geeksforgeeks.org/largest-sum-subarray-least-k-numbers/"],
                "description": "Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks. Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle. However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle. You need to return the least number of intervals the CPU will take to finish all the given tasks."
            }
        ]
    },
{
    "id": "EF1CC8BB-4785-4D8E-AB98-5FA5E00B6A10",
    "name": "BackTracking",
    "items": [{
            "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
            "name": "Single Number",
            "restrictions": ["G", "V"],
            "description": "Given a non-empty array of integers, every element appears twice except for one. Find that single one.."
        },
        {
            "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
            "name": "Repeated DNA Sequences",
            "restrictions": ["D", "G", "V"],
            "description": "All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: ACGAATTCCG. When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule."
        },
        {
            "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
            "name": "Reverse Bits",
            "restrictions": ["D", "N"],
            "description": "Reverse bits of a given 32 bits unsigned integer."
        },
        {
            "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
            "name": "Bitwise AND of Numbers Range",
            "restrictions": ["D", "G"],
            "description": "Given a range [m, n] where 0 <= m <= n <= 2147483647, return the bitwise AND of all numbers in this range, inclusive."
        },
        {
            "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
            "name": "Kth Largest Element in an Array ",
            "restrictions": ["G"],
            "description": "Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element."
        },
        {
            "id": "190E1A9D-20A4-4F98-AA54-B192E1C4D7B9",
            "name": "Additive Number ",
            "restrictions": ["D", "N", "V"],
            "description": "Additive number is a string whose digits can form additive sequence.A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.Given a string containing only digits '0'-'9', write a function to determine if it's an additive number."
        }
    ]
},

{
    "id": "EF1CC5BB-4785-3D8E-AB98-5FA5E00B6A66",
    "name": "Bit Manipulation",
    "items": [
        {
            "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
            "name": "Pyramid Transition Matrix ",
            "restrictions": ["G", "V"],
            "description": "We are stacking blocks to form a pyramid. Each block has a color which is a one letter string."
        },
        {
            "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
            "name": "Letter Case Permutation",
            "restrictions": ["D", "G", "V"],
            "description": "Given a string S, we can transform every letter individually to be lowercase or uppercase to create another string.  Return a list of all possible strings we could create.."
        },
        {
            "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
            "name": "Reverse Bits",
            "restrictions": ["D", "N"],
            "description": "Reverse bits of a given 32 bits unsigned integer."
        },
        {
            "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
            "name": "Bitwise AND of Numbers Range",
            "restrictions": ["D", "G"],
            "description": "Given a range [m, n] where 0 <= m <= n <= 2147483647, return the bitwise AND of all numbers in this range, inclusive."
        },
        {
            "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
            "name": "Kth Largest Element in an Array ",
            "restrictions": ["G"],
            "description": "Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element."
        },
        {
            "id": "190E1A9D-20A4-4F98-AA54-B192E1C4D7B9",
            "name": "Additive Number ",
            "restrictions": ["D", "N", "V"],
            "description": "Additive number is a string whose digits can form additive sequence.A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.Given a string containing only digits '0'-'9', write a function to determine if it's an additive number."
        }
    ]
},
{
        "id": "EF1CC5BB-1785-4D8E-AB98-5FA5E00C6A68",
        "name": "Divide and Conquer",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Two sum",
                "restrictions": ["G", "V"],
                "description": "Given an array of integers, return indices of the two numbers such that they add up to a specific target.You may assume that each input would have exactly one solution, and you may not use the same element twice."
            },
        {
            "id": "EDCD038C-036F-4C10-826F-61C88CD84DDD",
            "name": "Freedom Trail",
            "restrictions": ["G", "V"],
            "description": "Given an array of integers, return indices of the two numbers such that they add up to a specific target.You may assume that each input would have exactly one solution, and you may not use the same element twice."
        },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Container with most water",
                "restrictions": ["D", "G", "V"],
                "description": "Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water."
            },
            {
                "id": "CFB8C2DB-3478-4110-92FA-3D2A2D5324FB",
                "name": "Valid paranthesis",
                "restrictions": ["D", "N"],
                "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Remove Duplicates from Sorted Array",
                "restrictions": ["D", "G"],
                "description": "Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory."
            },
            {
                "id": "82B28AFF-BB29-4106-AA07-04959180D81A",
                "name": "Remove Element",
                "restrictions": ["G"],
                "description": "Given an array nums and a value val, remove all instances of that value in-place and return the new length.Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory."
            },
            {
                "id": "190E1A9D-20A4-4C98-AA54-B192E1C4D7B9",
                "name": "Find First and Last Position of Element in Sorted Array",
                "restrictions": ["D", "N", "V"],
                "description": "Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.Your algorithm's runtime complexity must be in the order of O(log n).If the target is not found in the array, return [-1, -1]."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Search Insert Position",
                "restrictions": ["G"],
                "description": "Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Remove Element",
                "restrictions": ["G"],
                "description": "Given an array nums and a value val, remove all instances of that value in-place and return the new length.Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Combination Sum",
                "restrictions": ["G"],
                "description": "Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Reverse Pairs",
                "restrictions": ["G"],
                "description": "Given an array nums, we call (i, j) an important reverse pair if i < j and nums[i] > 2*nums[j].."
            }
        ]
    },
    {
        "id": "EF1CC5BB-4785-4D8E-AB98-5FA5E00B6A66",
        "name": "Strings",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Add Strings",
                "restrictions": ["https://www.geeksforgeeks.org/find-if-string-is-k-palindrome-or-not-set-2/", "V"],
                "description": "Given two non-negative integers num1 and num2 represented as string, return the sum of num1 and num2."
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Reverse String II",
                "restrictions": ["https://www.geeksforgeeks.org/find-if-string-is-k-palindrome-or-not-set-2/", "G", "V"],
                "description": "Given a string and an integer k, you need to reverse the first k characters for every 2k characters counting from the start of the string. If there are less than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and left the other as original."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Construct String from Binary Tree",
                "restrictions": ["https://www.geeksforgeeks.org/program-to-add-two-binary-strings/", "N"],
                "description": "You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way. The null node needs to be represented by empty parenthesis pair And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relationship between the string and the original binary tree."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Reorganize String",
                "restrictions": ["D", "G"],
                "description": "Given a string S, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same. If possible, output any possible result.  If not possible, return the empty string."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Special Binary String",
                "restrictions": ["G"],
                "description": "Special binary strings are binary strings with the following two properties: The number of 0's is equal to the number of 1's."

            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Bitwise AND of Numbers Range",
                "restrictions": ["D", "G"],
                "description": "Given a range [m, n] where 0 <= m <= n <= 2147483647, return the bitwise AND of all numbers in this range, inclusive."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Kth Largest Element in an Array ",
                "restrictions": ["G"],
                "description": "Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element."
            },
            {
                "id": "190E1A9D-20A4-4F98-AA54-B192E1C4D7B9",
                "name": "Additive Number ",
                "restrictions": ["D", "N", "V"],
                "description": "Additive number is a string whose digits can form additive sequence.A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.Given a string containing only digits '0'-'9', write a function to determine if it's an additive number."
            }
        ]
    },
    {
        "id": "EF1CC5BB-4785-4D8E-AB98-5FA5E00C6A66",
        "name": "Stacks",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Next Greater Node In Linked List",
                "restrictions": ["G", "V"],
                "description": "We are given a linked list with head as the first node.  Let's number the nodes in the list: node_1, node_2, node_3, ... etc. Each node may have a next larger value: for node_i, next_larger(node_i) is the node_j.val such that j > i, node_j.val > node_i.val, and j is the smallest possible choice.  If such a j does not exist, the next larger value is 0. Return an array of integers answer, where answer[i] = next_larger(node_{i+1}). Note that in the example inputs (not outputs) below, arrays such as [2,1,5] represent the serialization of a linked list with a head node value of 2, second node value of 1, and third node value of 5."
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Validate Stack Sequences",
                "restrictions": ["D", "G", "V"],
                "description": "Given two sequences pushed and popped with distinct values, return true if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": " Minimum Remove to Make Valid Parentheses",
                "restrictions": ["D", "N"],
                "description": "Given a string s of '(' , ')' and lowercase English characters. Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string. Formally, a parentheses string is valid if and only if:It is the empty string,contains only lowercase characters,orIt can be written as AB(A concatenated with B),where A and B are valid strings"
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Asteroid Collision",
                "restrictions": ["D", "G"],
                "description": "We are given an array asteroids of integers representing asteroids in a row. For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed. Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Score of Parentheses",
                "restrictions": ["G"],
                "description": "Given a balanced parentheses string S, compute the score of the string based on the following rule: () has score 1."

            }
        ]
    },
    {
        "id": "EF1CC5BB-4785-4D8E-AB98-5FA5E00C6A66",
        "name": "Queues",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Next Greater Node In Linked List",
                "restrictions": ["G", "V"],
                "description": "We are given a linked list with head as the first node.  Let's number the nodes in the list: node_1, node_2, node_3, ... etc. Each node may have a next larger value: for node_i, next_larger(node_i) is the node_j.val such that j > i, node_j.val > node_i.val, and j is the smallest possible choice.  If such a j does not exist, the next larger value is 0. Return an array of integers answer, where answer[i] = next_larger(node_{i+1}). Note that in the example inputs (not outputs) below, arrays such as [2,1,5] represent the serialization of a linked list with a head node value of 2, second node value of 1, and third node value of 5."
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Validate Stack Sequences",
                "restrictions": ["D", "G", "V"],
                "description": "Given two sequences pushed and popped with distinct values, return true if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": " Minimum Remove to Make Valid Parentheses",
                "restrictions": ["D", "N"],
                "description": "Given a string s of '(' , ')' and lowercase English characters. Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string. Formally, a parentheses string is valid if and only if:It is the empty string,contains only lowercase characters,orIt can be written as AB(A concatenated with B),where A and B are valid strings"
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Asteroid Collision",
                "restrictions": ["D", "G"],
                "description": "We are given an array asteroids of integers representing asteroids in a row. For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed. Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Score of Parentheses",
                "restrictions": ["G"],
                "description": "Given a balanced parentheses string S, compute the score of the string based on the following rule: () has score 1."

            }
        ]
    },
    {
        "id": "EF1CC5BB-4785-4D8E-AB18-5FA5E00B6A66",
        "name": "Trees",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": " Populating Next Right Pointers in Each Node",
                "restrictions": ["G", "V"],
                "description": "You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:struct Node {"
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Same Tree",
                "restrictions": ["D", "G", "V"],
                "description": "Given two binary trees, write a function to check if they are the same or not. Two binary trees are considered the same if they are structurally identical and the nodes have the same value."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": " Binary Tree Paths",
                "restrictions": ["D", "N"],
                "description": "Given a binary tree, return all root-to-leaf paths. Note: A leaf is a node with no children."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Binary Tree Inorder Traversal",
                "restrictions": ["D", "G"],
                "description": "Given a binary tree, return the inorder traversal of its nodes' values."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Binary Tree Level Order Traversal",
                "restrictions": ["G"],
                "description": "Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).  For example: Given binary tree [3,9,20,null,null,15,7],"
            }
        ]
    }, {
        "id": "EF1CC5BB-4795-4D8E-AB98-5FA5E00B6A66",
        "name": "HashMap",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Powerful Integers",
                "restrictions": ["G", "V"],
                "description": "Given two positive integers x and y, an integer is powerful if it is equal to x^i + y^j for some integers i >= 0 and j >= 0. Return a list of all powerful integers that have value less than or equal to bound. You may return the answer in any order.  In your answer, each value should occur at most once."
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Time Based Key-Value Store",
                "restrictions": ["D", "G", "V"],
                "description": "Create a timebased key-value store class TimeMap, that supports two operations"

            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Occurrences After Bigram",
                "restrictions": ["D", "N"],
                "description": "Given words first and second, consider occurrences in some text of the form 'first second third ', where second comes immediately after first, and third comes immediately after second. For each such occurrence, add "
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Longest String Chain",
                "restrictions": ["D", "G"],
                "description": "Given a list of words, each word consists of English lowercase letters. Let's say word1 is a predecessor of word2 if and only if we can add exactly one letter anywhere in word1 to make it equal to word2.  For example, 'abc' is a predecessor of abac. A word chain is a sequence of words [word_1, word_2, ..., word_k] with k >= 1, where word_1 is a predecessor of word_2, word_2 is a predecessor of word_3, and so on. Return the longest possible length of a word chain with words chosen from the given list of words."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Subarray Sums Divisible by K",
                "restrictions": ["G"],
                "description": "Given an array A of integers, return the number of (contiguous, non-empty) subarrays that have a sum divisible by K."
            }
        ]
    },
    {
        "id": "EF1CC5BB-4754-4D8E-AB38-5FA5E00B6A66",
        "name": "Recursion",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": " Best Time to Buy and Sell Stock III",
                "restrictions": ["G", "V"],
                "description": "Say you have an array for which the ith element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete at most two transactions. Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again)."
            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": " House Robber",
                "restrictions": ["D", "G", "V"],
                "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night. Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police. "
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Perfect Squares",
                "restrictions": ["D", "N"],
                "description": "Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Range Sum Query - Immutable",
                "restrictions": ["D", "G"],
                "description": "Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Wiggle Subsequence",
                "restrictions": ["G"],
                "description": "A sequence of numbers is called a wiggle sequence if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence. For example, [1,7,4,9,2,5] is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and negative. In contrast, [1,4,7,2,5] and [1,7,4,5,5] are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero. Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order."
            }
        ]
    },




    {
        "id": "EF1CC5BB-4754-4D8E-AB98-5FA5E00B6A66",
        "name": "Dynamic Programming",
        "items": [{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
                "name": "Regular Expression Matching",
                "restrictions": ["G", "V"],
                "description": "Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'"

            },
            {
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
                "name": "Maximum Subarray",
                "restrictions": ["D", "G", "V"],
                "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum."
            },
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Interleaving String",
                "restrictions": ["D", "N"],
                "description": "Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2."
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "Word Break",
                "restrictions": ["D", "G"],
                "description": "Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words."
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "Burst Balloons",
                "restrictions": ["G"],
                "description": "Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.Find the maximum coins you can collect by bursting the balloons wisely."

            }
        ]
    }
]
